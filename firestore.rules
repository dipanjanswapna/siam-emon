rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is the admin
    function isAdmin() {
      return request.auth.uid == "jY5SNkuZxbgadjdZzSe9Favqs7n1";
    }

    // PUBLIC DATA: Anyone can read, only admin can write
    match /commitments/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /academicAchievements/{docId} {
        allow read: if true;
        allow write: if isAdmin();
    }

    match /gallery/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /teamMembers/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /socialWorks/{docId} {
        allow read: if true;
        allow write: if isAdmin();
    }

    match /notices/{docId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    match /siteSettings/{docId} {
        allow read: if true;
        allow write: if isAdmin();
    }

    // FEEDBACK: Anyone can create, but no one can read, update, or delete except admin
    match /feedback/{docId} {
      allow read, delete: if isAdmin();
      allow create: if true;
      allow update: if false;
    }
    
    // PRE-VOTES: Anyone can update the count, but no one can read the document directly
    // This uses security rules to allow atomic increments without exposing the total count.
    match /pre-votes/live-count {
      allow read: if true; // Allow reading for the component
      allow write: if isAdmin(); // Admin can reset/write initial value
      allow update: if request.resource.data.count == resource.data.count + 1; // Allow anyone to increment
    }
  }
}

    